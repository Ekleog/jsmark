#!/usr/bin/env python3

if __name__ != '__main__':
    print('This script does not handle being used as a library. Sorry.')
    exit(1)

from math import sqrt
from lib import jsnes, octane
import os
import sys

if len(sys.argv) != 3:
    print('Usage: ' + sys.argv[0] + ' INTERPRETER_BEFORE INTERPRETER_AFTER')
    exit(2)

interp_before = os.path.join(os.getcwd(), sys.argv[1])
interp_after = os.path.join(os.getcwd(), sys.argv[2])

benchs = {
    'jsnes': jsnes.Bench,
    'octane': octane.Bench,
}

def run(bench, interp, results):
    for (k, v) in benchs[bench].run(interp).items():
        name = bench + '~' + k
        if not name in results:
            results[name] = []
        results[name].append(v)

def analyze(results):
    def analyze_list(l):
        mean = 0.
        for x in l:
            mean += x
        mean /= len(l)
        variance = 0.
        for x in l:
            variance += (x - mean) * (x - mean)
        variance /= len(l)
        return {'mean': mean, 'interv': 1.96 * sqrt(variance / len(l))} # 95% confidence interval

    result = {}
    for (k, l) in results.items():
        result[k] = analyze_list(l)
    return result

def pretty(before, after):
    keylen, meanlen, intervlen = 0, 0, 0
    for d in (before, after):
        for (k, v) in d.items():
            keylen = max(keylen, len(k))
            meanlen = max(meanlen, len(str(round(v['mean'], 2))))
            intervlen = max(intervlen, len(str(round(v['interv'], 2))))
    for k in sorted(before.keys()):
        change = ''
        if before[k]['mean'] + before[k]['interv'] < after[k]['mean'] - after[k]['interv']:
            change = '(better)' if benchs[k.split('~')[0]].moreisbetter else '(worse)'
        if before[k]['mean'] - before[k]['interv'] > after[k]['mean'] + after[k]['interv']:
            change = '(worse)' if benchs[k.split('~')[0]].moreisbetter else '(better)'

        print(k.ljust(keylen, ' ') + '  :  ' +
              str(round(before[k]['mean'], 2)).ljust(meanlen, ' ') + ' ± ' +
              str(round(before[k]['interv'], 2)).ljust(intervlen, ' ') + '  →  ' +
              str(round(after[k]['mean'], 2)).ljust(meanlen, ' ') + ' ± ' +
              str(round(after[k]['interv'], 2)).ljust(intervlen, ' ') + '  ' +
              change)

before = {}
after = {}

# Initialization
print()
print('... Initialization ...')
print()
for i in range(3):
    for k in benchs:
        run(k, interp_before, before)
        run(k, interp_after, after)
pretty(analyze(before), analyze(after))

# Main loop
while True:
    for k in benchs:
        print()
        print('... Running ' + k + ' ...')
        print()
        run(k, interp_before, before)
        run(k, interp_after, after)
        pretty(analyze(before), analyze(after))
